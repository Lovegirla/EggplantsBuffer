// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iris.proto3

#include "iris.proto3.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace test1 {
PROTOBUF_CONSTEXPR Flower::Flower(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.species_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sepallength_)*/0
  , /*decltype(_impl_.sepalwidth_)*/0
  , /*decltype(_impl_.petallength_)*/0
  , /*decltype(_impl_.petalwidth_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlowerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlowerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlowerDefaultTypeInternal() {}
  union {
    Flower _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlowerDefaultTypeInternal _Flower_default_instance_;
PROTOBUF_CONSTEXPR Flowers::Flowers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.flowers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlowersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlowersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlowersDefaultTypeInternal() {}
  union {
    Flowers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlowersDefaultTypeInternal _Flowers_default_instance_;
}  // namespace test1
static ::_pb::Metadata file_level_metadata_iris_2eproto3[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_iris_2eproto3 = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_iris_2eproto3 = nullptr;

const uint32_t TableStruct_iris_2eproto3::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test1::Flower, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test1::Flower, _impl_.sepallength_),
  PROTOBUF_FIELD_OFFSET(::test1::Flower, _impl_.sepalwidth_),
  PROTOBUF_FIELD_OFFSET(::test1::Flower, _impl_.petallength_),
  PROTOBUF_FIELD_OFFSET(::test1::Flower, _impl_.petalwidth_),
  PROTOBUF_FIELD_OFFSET(::test1::Flower, _impl_.species_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test1::Flowers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test1::Flowers, _impl_.flowers_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::test1::Flower)},
  { 11, -1, -1, sizeof(::test1::Flowers)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::test1::_Flower_default_instance_._instance,
  &::test1::_Flowers_default_instance_._instance,
};

const char descriptor_table_protodef_iris_2eproto3[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013iris.proto3\022\005test1\"k\n\006Flower\022\023\n\013sepalL"
  "ength\030\001 \001(\002\022\022\n\nsepalWidth\030\002 \001(\002\022\023\n\013petal"
  "Length\030\003 \001(\002\022\022\n\npetalWidth\030\004 \001(\002\022\017\n\007spec"
  "ies\030\005 \001(\t\")\n\007Flowers\022\036\n\007flowers\030\001 \003(\0132\r."
  "test1.Flowerb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_iris_2eproto3_once;
const ::_pbi::DescriptorTable descriptor_table_iris_2eproto3 = {
    false, false, 180, descriptor_table_protodef_iris_2eproto3,
    "iris.proto3",
    &descriptor_table_iris_2eproto3_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_iris_2eproto3::offsets,
    file_level_metadata_iris_2eproto3, file_level_enum_descriptors_iris_2eproto3,
    file_level_service_descriptors_iris_2eproto3,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_iris_2eproto3_getter() {
  return &descriptor_table_iris_2eproto3;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_iris_2eproto3(&descriptor_table_iris_2eproto3);
namespace test1 {

// ===================================================================

class Flower::_Internal {
 public:
};

Flower::Flower(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:test1.Flower)
}
Flower::Flower(const Flower& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Flower* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.species_){}
    , decltype(_impl_.sepallength_){}
    , decltype(_impl_.sepalwidth_){}
    , decltype(_impl_.petallength_){}
    , decltype(_impl_.petalwidth_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.species_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.species_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_species().empty()) {
    _this->_impl_.species_.Set(from._internal_species(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sepallength_, &from._impl_.sepallength_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.petalwidth_) -
    reinterpret_cast<char*>(&_impl_.sepallength_)) + sizeof(_impl_.petalwidth_));
  // @@protoc_insertion_point(copy_constructor:test1.Flower)
}

inline void Flower::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.species_){}
    , decltype(_impl_.sepallength_){0}
    , decltype(_impl_.sepalwidth_){0}
    , decltype(_impl_.petallength_){0}
    , decltype(_impl_.petalwidth_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.species_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.species_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Flower::~Flower() {
  // @@protoc_insertion_point(destructor:test1.Flower)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Flower::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.species_.Destroy();
}

void Flower::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Flower::Clear() {
// @@protoc_insertion_point(message_clear_start:test1.Flower)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.species_.ClearToEmpty();
  ::memset(&_impl_.sepallength_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.petalwidth_) -
      reinterpret_cast<char*>(&_impl_.sepallength_)) + sizeof(_impl_.petalwidth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Flower::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float sepalLength = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.sepallength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float sepalWidth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.sepalwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float petalLength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.petallength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float petalWidth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.petalwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string species = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_species();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "test1.Flower.species"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Flower::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test1.Flower)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float sepalLength = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sepallength = this->_internal_sepallength();
  uint32_t raw_sepallength;
  memcpy(&raw_sepallength, &tmp_sepallength, sizeof(tmp_sepallength));
  if (raw_sepallength != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_sepallength(), target);
  }

  // float sepalWidth = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sepalwidth = this->_internal_sepalwidth();
  uint32_t raw_sepalwidth;
  memcpy(&raw_sepalwidth, &tmp_sepalwidth, sizeof(tmp_sepalwidth));
  if (raw_sepalwidth != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_sepalwidth(), target);
  }

  // float petalLength = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_petallength = this->_internal_petallength();
  uint32_t raw_petallength;
  memcpy(&raw_petallength, &tmp_petallength, sizeof(tmp_petallength));
  if (raw_petallength != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_petallength(), target);
  }

  // float petalWidth = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_petalwidth = this->_internal_petalwidth();
  uint32_t raw_petalwidth;
  memcpy(&raw_petalwidth, &tmp_petalwidth, sizeof(tmp_petalwidth));
  if (raw_petalwidth != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_petalwidth(), target);
  }

  // string species = 5;
  if (!this->_internal_species().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_species().data(), static_cast<int>(this->_internal_species().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test1.Flower.species");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_species(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test1.Flower)
  return target;
}

size_t Flower::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test1.Flower)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string species = 5;
  if (!this->_internal_species().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_species());
  }

  // float sepalLength = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sepallength = this->_internal_sepallength();
  uint32_t raw_sepallength;
  memcpy(&raw_sepallength, &tmp_sepallength, sizeof(tmp_sepallength));
  if (raw_sepallength != 0) {
    total_size += 1 + 4;
  }

  // float sepalWidth = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sepalwidth = this->_internal_sepalwidth();
  uint32_t raw_sepalwidth;
  memcpy(&raw_sepalwidth, &tmp_sepalwidth, sizeof(tmp_sepalwidth));
  if (raw_sepalwidth != 0) {
    total_size += 1 + 4;
  }

  // float petalLength = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_petallength = this->_internal_petallength();
  uint32_t raw_petallength;
  memcpy(&raw_petallength, &tmp_petallength, sizeof(tmp_petallength));
  if (raw_petallength != 0) {
    total_size += 1 + 4;
  }

  // float petalWidth = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_petalwidth = this->_internal_petalwidth();
  uint32_t raw_petalwidth;
  memcpy(&raw_petalwidth, &tmp_petalwidth, sizeof(tmp_petalwidth));
  if (raw_petalwidth != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Flower::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Flower::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Flower::GetClassData() const { return &_class_data_; }


void Flower::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Flower*>(&to_msg);
  auto& from = static_cast<const Flower&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:test1.Flower)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_species().empty()) {
    _this->_internal_set_species(from._internal_species());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sepallength = from._internal_sepallength();
  uint32_t raw_sepallength;
  memcpy(&raw_sepallength, &tmp_sepallength, sizeof(tmp_sepallength));
  if (raw_sepallength != 0) {
    _this->_internal_set_sepallength(from._internal_sepallength());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sepalwidth = from._internal_sepalwidth();
  uint32_t raw_sepalwidth;
  memcpy(&raw_sepalwidth, &tmp_sepalwidth, sizeof(tmp_sepalwidth));
  if (raw_sepalwidth != 0) {
    _this->_internal_set_sepalwidth(from._internal_sepalwidth());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_petallength = from._internal_petallength();
  uint32_t raw_petallength;
  memcpy(&raw_petallength, &tmp_petallength, sizeof(tmp_petallength));
  if (raw_petallength != 0) {
    _this->_internal_set_petallength(from._internal_petallength());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_petalwidth = from._internal_petalwidth();
  uint32_t raw_petalwidth;
  memcpy(&raw_petalwidth, &tmp_petalwidth, sizeof(tmp_petalwidth));
  if (raw_petalwidth != 0) {
    _this->_internal_set_petalwidth(from._internal_petalwidth());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Flower::CopyFrom(const Flower& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test1.Flower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Flower::IsInitialized() const {
  return true;
}

void Flower::InternalSwap(Flower* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.species_, lhs_arena,
      &other->_impl_.species_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Flower, _impl_.petalwidth_)
      + sizeof(Flower::_impl_.petalwidth_)
      - PROTOBUF_FIELD_OFFSET(Flower, _impl_.sepallength_)>(
          reinterpret_cast<char*>(&_impl_.sepallength_),
          reinterpret_cast<char*>(&other->_impl_.sepallength_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Flower::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_iris_2eproto3_getter, &descriptor_table_iris_2eproto3_once,
      file_level_metadata_iris_2eproto3[0]);
}

// ===================================================================

class Flowers::_Internal {
 public:
};

Flowers::Flowers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:test1.Flowers)
}
Flowers::Flowers(const Flowers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Flowers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.flowers_){from._impl_.flowers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:test1.Flowers)
}

inline void Flowers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.flowers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Flowers::~Flowers() {
  // @@protoc_insertion_point(destructor:test1.Flowers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Flowers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.flowers_.~RepeatedPtrField();
}

void Flowers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Flowers::Clear() {
// @@protoc_insertion_point(message_clear_start:test1.Flowers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.flowers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Flowers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .test1.Flower flowers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_flowers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Flowers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test1.Flowers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .test1.Flower flowers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_flowers_size()); i < n; i++) {
    const auto& repfield = this->_internal_flowers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test1.Flowers)
  return target;
}

size_t Flowers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test1.Flowers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .test1.Flower flowers = 1;
  total_size += 1UL * this->_internal_flowers_size();
  for (const auto& msg : this->_impl_.flowers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Flowers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Flowers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Flowers::GetClassData() const { return &_class_data_; }


void Flowers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Flowers*>(&to_msg);
  auto& from = static_cast<const Flowers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:test1.Flowers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.flowers_.MergeFrom(from._impl_.flowers_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Flowers::CopyFrom(const Flowers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test1.Flowers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Flowers::IsInitialized() const {
  return true;
}

void Flowers::InternalSwap(Flowers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.flowers_.InternalSwap(&other->_impl_.flowers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Flowers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_iris_2eproto3_getter, &descriptor_table_iris_2eproto3_once,
      file_level_metadata_iris_2eproto3[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace test1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::test1::Flower*
Arena::CreateMaybeMessage< ::test1::Flower >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test1::Flower >(arena);
}
template<> PROTOBUF_NOINLINE ::test1::Flowers*
Arena::CreateMaybeMessage< ::test1::Flowers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test1::Flowers >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
