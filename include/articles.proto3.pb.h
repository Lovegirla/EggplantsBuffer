// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: articles.proto3

#ifndef GOOGLE_PROTOBUF_INCLUDED_articles_2eproto3
#define GOOGLE_PROTOBUF_INCLUDED_articles_2eproto3

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_articles_2eproto3
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_articles_2eproto3 {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_articles_2eproto3;
namespace test_art {
class Article;
struct ArticleDefaultTypeInternal;
extern ArticleDefaultTypeInternal _Article_default_instance_;
class Articles;
struct ArticlesDefaultTypeInternal;
extern ArticlesDefaultTypeInternal _Articles_default_instance_;
class CAnswer;
struct CAnswerDefaultTypeInternal;
extern CAnswerDefaultTypeInternal _CAnswer_default_instance_;
class Paragraph;
struct ParagraphDefaultTypeInternal;
extern ParagraphDefaultTypeInternal _Paragraph_default_instance_;
class QASData;
struct QASDataDefaultTypeInternal;
extern QASDataDefaultTypeInternal _QASData_default_instance_;
}  // namespace test_art
PROTOBUF_NAMESPACE_OPEN
template<> ::test_art::Article* Arena::CreateMaybeMessage<::test_art::Article>(Arena*);
template<> ::test_art::Articles* Arena::CreateMaybeMessage<::test_art::Articles>(Arena*);
template<> ::test_art::CAnswer* Arena::CreateMaybeMessage<::test_art::CAnswer>(Arena*);
template<> ::test_art::Paragraph* Arena::CreateMaybeMessage<::test_art::Paragraph>(Arena*);
template<> ::test_art::QASData* Arena::CreateMaybeMessage<::test_art::QASData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test_art {

// ===================================================================

class CAnswer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_art.CAnswer) */ {
 public:
  inline CAnswer() : CAnswer(nullptr) {}
  ~CAnswer() override;
  explicit PROTOBUF_CONSTEXPR CAnswer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAnswer(const CAnswer& from);
  CAnswer(CAnswer&& from) noexcept
    : CAnswer() {
    *this = ::std::move(from);
  }

  inline CAnswer& operator=(const CAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAnswer& operator=(CAnswer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAnswer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAnswer* internal_default_instance() {
    return reinterpret_cast<const CAnswer*>(
               &_CAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CAnswer& a, CAnswer& b) {
    a.Swap(&b);
  }
  inline void Swap(CAnswer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAnswer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAnswer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAnswer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAnswer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CAnswer& from) {
    CAnswer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAnswer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_art.CAnswer";
  }
  protected:
  explicit CAnswer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kAnswerStartFieldNumber = 1,
  };
  // string text = 2;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // int64 answer_start = 1;
  void clear_answer_start();
  int64_t answer_start() const;
  void set_answer_start(int64_t value);
  private:
  int64_t _internal_answer_start() const;
  void _internal_set_answer_start(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:test_art.CAnswer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    int64_t answer_start_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_articles_2eproto3;
};
// -------------------------------------------------------------------

class QASData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_art.QASData) */ {
 public:
  inline QASData() : QASData(nullptr) {}
  ~QASData() override;
  explicit PROTOBUF_CONSTEXPR QASData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QASData(const QASData& from);
  QASData(QASData&& from) noexcept
    : QASData() {
    *this = ::std::move(from);
  }

  inline QASData& operator=(const QASData& from) {
    CopyFrom(from);
    return *this;
  }
  inline QASData& operator=(QASData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QASData& default_instance() {
    return *internal_default_instance();
  }
  static inline const QASData* internal_default_instance() {
    return reinterpret_cast<const QASData*>(
               &_QASData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QASData& a, QASData& b) {
    a.Swap(&b);
  }
  inline void Swap(QASData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QASData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QASData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QASData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QASData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QASData& from) {
    QASData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QASData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_art.QASData";
  }
  protected:
  explicit QASData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswersFieldNumber = 3,
    kIdFieldNumber = 1,
    kQuestionFieldNumber = 2,
  };
  // repeated .test_art.CAnswer answers = 3;
  int answers_size() const;
  private:
  int _internal_answers_size() const;
  public:
  void clear_answers();
  ::test_art::CAnswer* mutable_answers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_art::CAnswer >*
      mutable_answers();
  private:
  const ::test_art::CAnswer& _internal_answers(int index) const;
  ::test_art::CAnswer* _internal_add_answers();
  public:
  const ::test_art::CAnswer& answers(int index) const;
  ::test_art::CAnswer* add_answers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_art::CAnswer >&
      answers() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string question = 2;
  void clear_question();
  const std::string& question() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_question(ArgT0&& arg0, ArgT... args);
  std::string* mutable_question();
  PROTOBUF_NODISCARD std::string* release_question();
  void set_allocated_question(std::string* question);
  private:
  const std::string& _internal_question() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_question(const std::string& value);
  std::string* _internal_mutable_question();
  public:

  // @@protoc_insertion_point(class_scope:test_art.QASData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_art::CAnswer > answers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr question_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_articles_2eproto3;
};
// -------------------------------------------------------------------

class Paragraph final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_art.Paragraph) */ {
 public:
  inline Paragraph() : Paragraph(nullptr) {}
  ~Paragraph() override;
  explicit PROTOBUF_CONSTEXPR Paragraph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Paragraph(const Paragraph& from);
  Paragraph(Paragraph&& from) noexcept
    : Paragraph() {
    *this = ::std::move(from);
  }

  inline Paragraph& operator=(const Paragraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline Paragraph& operator=(Paragraph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Paragraph& default_instance() {
    return *internal_default_instance();
  }
  static inline const Paragraph* internal_default_instance() {
    return reinterpret_cast<const Paragraph*>(
               &_Paragraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Paragraph& a, Paragraph& b) {
    a.Swap(&b);
  }
  inline void Swap(Paragraph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Paragraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Paragraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Paragraph>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Paragraph& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Paragraph& from) {
    Paragraph::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Paragraph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_art.Paragraph";
  }
  protected:
  explicit Paragraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQasDataFieldNumber = 2,
    kContextFieldNumber = 1,
  };
  // repeated .test_art.QASData qasData = 2;
  int qasdata_size() const;
  private:
  int _internal_qasdata_size() const;
  public:
  void clear_qasdata();
  ::test_art::QASData* mutable_qasdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_art::QASData >*
      mutable_qasdata();
  private:
  const ::test_art::QASData& _internal_qasdata(int index) const;
  ::test_art::QASData* _internal_add_qasdata();
  public:
  const ::test_art::QASData& qasdata(int index) const;
  ::test_art::QASData* add_qasdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_art::QASData >&
      qasdata() const;

  // string context = 1;
  void clear_context();
  const std::string& context() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_context(ArgT0&& arg0, ArgT... args);
  std::string* mutable_context();
  PROTOBUF_NODISCARD std::string* release_context();
  void set_allocated_context(std::string* context);
  private:
  const std::string& _internal_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_context(const std::string& value);
  std::string* _internal_mutable_context();
  public:

  // @@protoc_insertion_point(class_scope:test_art.Paragraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_art::QASData > qasdata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_articles_2eproto3;
};
// -------------------------------------------------------------------

class Article final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_art.Article) */ {
 public:
  inline Article() : Article(nullptr) {}
  ~Article() override;
  explicit PROTOBUF_CONSTEXPR Article(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Article(const Article& from);
  Article(Article&& from) noexcept
    : Article() {
    *this = ::std::move(from);
  }

  inline Article& operator=(const Article& from) {
    CopyFrom(from);
    return *this;
  }
  inline Article& operator=(Article&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Article& default_instance() {
    return *internal_default_instance();
  }
  static inline const Article* internal_default_instance() {
    return reinterpret_cast<const Article*>(
               &_Article_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Article& a, Article& b) {
    a.Swap(&b);
  }
  inline void Swap(Article* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Article* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Article* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Article>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Article& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Article& from) {
    Article::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Article* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_art.Article";
  }
  protected:
  explicit Article(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParagraphsFieldNumber = 2,
    kTitleFieldNumber = 1,
  };
  // repeated .test_art.Paragraph paragraphs = 2;
  int paragraphs_size() const;
  private:
  int _internal_paragraphs_size() const;
  public:
  void clear_paragraphs();
  ::test_art::Paragraph* mutable_paragraphs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_art::Paragraph >*
      mutable_paragraphs();
  private:
  const ::test_art::Paragraph& _internal_paragraphs(int index) const;
  ::test_art::Paragraph* _internal_add_paragraphs();
  public:
  const ::test_art::Paragraph& paragraphs(int index) const;
  ::test_art::Paragraph* add_paragraphs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_art::Paragraph >&
      paragraphs() const;

  // string title = 1;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // @@protoc_insertion_point(class_scope:test_art.Article)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_art::Paragraph > paragraphs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_articles_2eproto3;
};
// -------------------------------------------------------------------

class Articles final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_art.Articles) */ {
 public:
  inline Articles() : Articles(nullptr) {}
  ~Articles() override;
  explicit PROTOBUF_CONSTEXPR Articles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Articles(const Articles& from);
  Articles(Articles&& from) noexcept
    : Articles() {
    *this = ::std::move(from);
  }

  inline Articles& operator=(const Articles& from) {
    CopyFrom(from);
    return *this;
  }
  inline Articles& operator=(Articles&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Articles& default_instance() {
    return *internal_default_instance();
  }
  static inline const Articles* internal_default_instance() {
    return reinterpret_cast<const Articles*>(
               &_Articles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Articles& a, Articles& b) {
    a.Swap(&b);
  }
  inline void Swap(Articles* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Articles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Articles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Articles>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Articles& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Articles& from) {
    Articles::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Articles* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_art.Articles";
  }
  protected:
  explicit Articles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArticleFieldNumber = 1,
  };
  // repeated .test_art.Article article = 1;
  int article_size() const;
  private:
  int _internal_article_size() const;
  public:
  void clear_article();
  ::test_art::Article* mutable_article(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_art::Article >*
      mutable_article();
  private:
  const ::test_art::Article& _internal_article(int index) const;
  ::test_art::Article* _internal_add_article();
  public:
  const ::test_art::Article& article(int index) const;
  ::test_art::Article* add_article();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_art::Article >&
      article() const;

  // @@protoc_insertion_point(class_scope:test_art.Articles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_art::Article > article_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_articles_2eproto3;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CAnswer

// int64 answer_start = 1;
inline void CAnswer::clear_answer_start() {
  _impl_.answer_start_ = int64_t{0};
}
inline int64_t CAnswer::_internal_answer_start() const {
  return _impl_.answer_start_;
}
inline int64_t CAnswer::answer_start() const {
  // @@protoc_insertion_point(field_get:test_art.CAnswer.answer_start)
  return _internal_answer_start();
}
inline void CAnswer::_internal_set_answer_start(int64_t value) {
  
  _impl_.answer_start_ = value;
}
inline void CAnswer::set_answer_start(int64_t value) {
  _internal_set_answer_start(value);
  // @@protoc_insertion_point(field_set:test_art.CAnswer.answer_start)
}

// string text = 2;
inline void CAnswer::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& CAnswer::text() const {
  // @@protoc_insertion_point(field_get:test_art.CAnswer.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAnswer::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_art.CAnswer.text)
}
inline std::string* CAnswer::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:test_art.CAnswer.text)
  return _s;
}
inline const std::string& CAnswer::_internal_text() const {
  return _impl_.text_.Get();
}
inline void CAnswer::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* CAnswer::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* CAnswer::release_text() {
  // @@protoc_insertion_point(field_release:test_art.CAnswer.text)
  return _impl_.text_.Release();
}
inline void CAnswer::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_art.CAnswer.text)
}

// -------------------------------------------------------------------

// QASData

// string id = 1;
inline void QASData::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& QASData::id() const {
  // @@protoc_insertion_point(field_get:test_art.QASData.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QASData::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_art.QASData.id)
}
inline std::string* QASData::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:test_art.QASData.id)
  return _s;
}
inline const std::string& QASData::_internal_id() const {
  return _impl_.id_.Get();
}
inline void QASData::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* QASData::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* QASData::release_id() {
  // @@protoc_insertion_point(field_release:test_art.QASData.id)
  return _impl_.id_.Release();
}
inline void QASData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_art.QASData.id)
}

// string question = 2;
inline void QASData::clear_question() {
  _impl_.question_.ClearToEmpty();
}
inline const std::string& QASData::question() const {
  // @@protoc_insertion_point(field_get:test_art.QASData.question)
  return _internal_question();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QASData::set_question(ArgT0&& arg0, ArgT... args) {
 
 _impl_.question_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_art.QASData.question)
}
inline std::string* QASData::mutable_question() {
  std::string* _s = _internal_mutable_question();
  // @@protoc_insertion_point(field_mutable:test_art.QASData.question)
  return _s;
}
inline const std::string& QASData::_internal_question() const {
  return _impl_.question_.Get();
}
inline void QASData::_internal_set_question(const std::string& value) {
  
  _impl_.question_.Set(value, GetArenaForAllocation());
}
inline std::string* QASData::_internal_mutable_question() {
  
  return _impl_.question_.Mutable(GetArenaForAllocation());
}
inline std::string* QASData::release_question() {
  // @@protoc_insertion_point(field_release:test_art.QASData.question)
  return _impl_.question_.Release();
}
inline void QASData::set_allocated_question(std::string* question) {
  if (question != nullptr) {
    
  } else {
    
  }
  _impl_.question_.SetAllocated(question, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.question_.IsDefault()) {
    _impl_.question_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_art.QASData.question)
}

// repeated .test_art.CAnswer answers = 3;
inline int QASData::_internal_answers_size() const {
  return _impl_.answers_.size();
}
inline int QASData::answers_size() const {
  return _internal_answers_size();
}
inline void QASData::clear_answers() {
  _impl_.answers_.Clear();
}
inline ::test_art::CAnswer* QASData::mutable_answers(int index) {
  // @@protoc_insertion_point(field_mutable:test_art.QASData.answers)
  return _impl_.answers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_art::CAnswer >*
QASData::mutable_answers() {
  // @@protoc_insertion_point(field_mutable_list:test_art.QASData.answers)
  return &_impl_.answers_;
}
inline const ::test_art::CAnswer& QASData::_internal_answers(int index) const {
  return _impl_.answers_.Get(index);
}
inline const ::test_art::CAnswer& QASData::answers(int index) const {
  // @@protoc_insertion_point(field_get:test_art.QASData.answers)
  return _internal_answers(index);
}
inline ::test_art::CAnswer* QASData::_internal_add_answers() {
  return _impl_.answers_.Add();
}
inline ::test_art::CAnswer* QASData::add_answers() {
  ::test_art::CAnswer* _add = _internal_add_answers();
  // @@protoc_insertion_point(field_add:test_art.QASData.answers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_art::CAnswer >&
QASData::answers() const {
  // @@protoc_insertion_point(field_list:test_art.QASData.answers)
  return _impl_.answers_;
}

// -------------------------------------------------------------------

// Paragraph

// string context = 1;
inline void Paragraph::clear_context() {
  _impl_.context_.ClearToEmpty();
}
inline const std::string& Paragraph::context() const {
  // @@protoc_insertion_point(field_get:test_art.Paragraph.context)
  return _internal_context();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Paragraph::set_context(ArgT0&& arg0, ArgT... args) {
 
 _impl_.context_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_art.Paragraph.context)
}
inline std::string* Paragraph::mutable_context() {
  std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:test_art.Paragraph.context)
  return _s;
}
inline const std::string& Paragraph::_internal_context() const {
  return _impl_.context_.Get();
}
inline void Paragraph::_internal_set_context(const std::string& value) {
  
  _impl_.context_.Set(value, GetArenaForAllocation());
}
inline std::string* Paragraph::_internal_mutable_context() {
  
  return _impl_.context_.Mutable(GetArenaForAllocation());
}
inline std::string* Paragraph::release_context() {
  // @@protoc_insertion_point(field_release:test_art.Paragraph.context)
  return _impl_.context_.Release();
}
inline void Paragraph::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    
  } else {
    
  }
  _impl_.context_.SetAllocated(context, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.context_.IsDefault()) {
    _impl_.context_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_art.Paragraph.context)
}

// repeated .test_art.QASData qasData = 2;
inline int Paragraph::_internal_qasdata_size() const {
  return _impl_.qasdata_.size();
}
inline int Paragraph::qasdata_size() const {
  return _internal_qasdata_size();
}
inline void Paragraph::clear_qasdata() {
  _impl_.qasdata_.Clear();
}
inline ::test_art::QASData* Paragraph::mutable_qasdata(int index) {
  // @@protoc_insertion_point(field_mutable:test_art.Paragraph.qasData)
  return _impl_.qasdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_art::QASData >*
Paragraph::mutable_qasdata() {
  // @@protoc_insertion_point(field_mutable_list:test_art.Paragraph.qasData)
  return &_impl_.qasdata_;
}
inline const ::test_art::QASData& Paragraph::_internal_qasdata(int index) const {
  return _impl_.qasdata_.Get(index);
}
inline const ::test_art::QASData& Paragraph::qasdata(int index) const {
  // @@protoc_insertion_point(field_get:test_art.Paragraph.qasData)
  return _internal_qasdata(index);
}
inline ::test_art::QASData* Paragraph::_internal_add_qasdata() {
  return _impl_.qasdata_.Add();
}
inline ::test_art::QASData* Paragraph::add_qasdata() {
  ::test_art::QASData* _add = _internal_add_qasdata();
  // @@protoc_insertion_point(field_add:test_art.Paragraph.qasData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_art::QASData >&
Paragraph::qasdata() const {
  // @@protoc_insertion_point(field_list:test_art.Paragraph.qasData)
  return _impl_.qasdata_;
}

// -------------------------------------------------------------------

// Article

// string title = 1;
inline void Article::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Article::title() const {
  // @@protoc_insertion_point(field_get:test_art.Article.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Article::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_art.Article.title)
}
inline std::string* Article::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:test_art.Article.title)
  return _s;
}
inline const std::string& Article::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Article::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Article::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Article::release_title() {
  // @@protoc_insertion_point(field_release:test_art.Article.title)
  return _impl_.title_.Release();
}
inline void Article::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_art.Article.title)
}

// repeated .test_art.Paragraph paragraphs = 2;
inline int Article::_internal_paragraphs_size() const {
  return _impl_.paragraphs_.size();
}
inline int Article::paragraphs_size() const {
  return _internal_paragraphs_size();
}
inline void Article::clear_paragraphs() {
  _impl_.paragraphs_.Clear();
}
inline ::test_art::Paragraph* Article::mutable_paragraphs(int index) {
  // @@protoc_insertion_point(field_mutable:test_art.Article.paragraphs)
  return _impl_.paragraphs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_art::Paragraph >*
Article::mutable_paragraphs() {
  // @@protoc_insertion_point(field_mutable_list:test_art.Article.paragraphs)
  return &_impl_.paragraphs_;
}
inline const ::test_art::Paragraph& Article::_internal_paragraphs(int index) const {
  return _impl_.paragraphs_.Get(index);
}
inline const ::test_art::Paragraph& Article::paragraphs(int index) const {
  // @@protoc_insertion_point(field_get:test_art.Article.paragraphs)
  return _internal_paragraphs(index);
}
inline ::test_art::Paragraph* Article::_internal_add_paragraphs() {
  return _impl_.paragraphs_.Add();
}
inline ::test_art::Paragraph* Article::add_paragraphs() {
  ::test_art::Paragraph* _add = _internal_add_paragraphs();
  // @@protoc_insertion_point(field_add:test_art.Article.paragraphs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_art::Paragraph >&
Article::paragraphs() const {
  // @@protoc_insertion_point(field_list:test_art.Article.paragraphs)
  return _impl_.paragraphs_;
}

// -------------------------------------------------------------------

// Articles

// repeated .test_art.Article article = 1;
inline int Articles::_internal_article_size() const {
  return _impl_.article_.size();
}
inline int Articles::article_size() const {
  return _internal_article_size();
}
inline void Articles::clear_article() {
  _impl_.article_.Clear();
}
inline ::test_art::Article* Articles::mutable_article(int index) {
  // @@protoc_insertion_point(field_mutable:test_art.Articles.article)
  return _impl_.article_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_art::Article >*
Articles::mutable_article() {
  // @@protoc_insertion_point(field_mutable_list:test_art.Articles.article)
  return &_impl_.article_;
}
inline const ::test_art::Article& Articles::_internal_article(int index) const {
  return _impl_.article_.Get(index);
}
inline const ::test_art::Article& Articles::article(int index) const {
  // @@protoc_insertion_point(field_get:test_art.Articles.article)
  return _internal_article(index);
}
inline ::test_art::Article* Articles::_internal_add_article() {
  return _impl_.article_.Add();
}
inline ::test_art::Article* Articles::add_article() {
  ::test_art::Article* _add = _internal_add_article();
  // @@protoc_insertion_point(field_add:test_art.Articles.article)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_art::Article >&
Articles::article() const {
  // @@protoc_insertion_point(field_list:test_art.Articles.article)
  return _impl_.article_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test_art

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_articles_2eproto3
