// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_IRIS_TEST_H_
#define FLATBUFFERS_GENERATED_IRIS_TEST_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace test {

struct Flower;
struct FlowerBuilder;

struct Flowers;
struct FlowersBuilder;

struct Flower FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FlowerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SEPALLENGTH = 4,
    VT_SEPALWIDTH = 6,
    VT_PETALLENGTH = 8,
    VT_PETALWIDTH = 10,
    VT_SPECIES = 12
  };
  float sepalLength() const {
    return GetField<float>(VT_SEPALLENGTH, 0.0f);
  }
  float sepalWidth() const {
    return GetField<float>(VT_SEPALWIDTH, 0.0f);
  }
  float petalLength() const {
    return GetField<float>(VT_PETALLENGTH, 0.0f);
  }
  float petalWidth() const {
    return GetField<float>(VT_PETALWIDTH, 0.0f);
  }
  const ::flatbuffers::String *species() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SPECIES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_SEPALLENGTH, 4) &&
           VerifyField<float>(verifier, VT_SEPALWIDTH, 4) &&
           VerifyField<float>(verifier, VT_PETALLENGTH, 4) &&
           VerifyField<float>(verifier, VT_PETALWIDTH, 4) &&
           VerifyOffset(verifier, VT_SPECIES) &&
           verifier.VerifyString(species()) &&
           verifier.EndTable();
  }
};

struct FlowerBuilder {
  typedef Flower Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_sepalLength(float sepalLength) {
    fbb_.AddElement<float>(Flower::VT_SEPALLENGTH, sepalLength, 0.0f);
  }
  void add_sepalWidth(float sepalWidth) {
    fbb_.AddElement<float>(Flower::VT_SEPALWIDTH, sepalWidth, 0.0f);
  }
  void add_petalLength(float petalLength) {
    fbb_.AddElement<float>(Flower::VT_PETALLENGTH, petalLength, 0.0f);
  }
  void add_petalWidth(float petalWidth) {
    fbb_.AddElement<float>(Flower::VT_PETALWIDTH, petalWidth, 0.0f);
  }
  void add_species(::flatbuffers::Offset<::flatbuffers::String> species) {
    fbb_.AddOffset(Flower::VT_SPECIES, species);
  }
  explicit FlowerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Flower> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Flower>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Flower> CreateFlower(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float sepalLength = 0.0f,
    float sepalWidth = 0.0f,
    float petalLength = 0.0f,
    float petalWidth = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> species = 0) {
  FlowerBuilder builder_(_fbb);
  builder_.add_species(species);
  builder_.add_petalWidth(petalWidth);
  builder_.add_petalLength(petalLength);
  builder_.add_sepalWidth(sepalWidth);
  builder_.add_sepalLength(sepalLength);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Flower> CreateFlowerDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float sepalLength = 0.0f,
    float sepalWidth = 0.0f,
    float petalLength = 0.0f,
    float petalWidth = 0.0f,
    const char *species = nullptr) {
  auto species__ = species ? _fbb.CreateString(species) : 0;
  return test::CreateFlower(
      _fbb,
      sepalLength,
      sepalWidth,
      petalLength,
      petalWidth,
      species__);
}

struct Flowers FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FlowersBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FLOWERS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<test::Flower>> *flowers() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<test::Flower>> *>(VT_FLOWERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FLOWERS) &&
           verifier.VerifyVector(flowers()) &&
           verifier.VerifyVectorOfTables(flowers()) &&
           verifier.EndTable();
  }
};

struct FlowersBuilder {
  typedef Flowers Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_flowers(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<test::Flower>>> flowers) {
    fbb_.AddOffset(Flowers::VT_FLOWERS, flowers);
  }
  explicit FlowersBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Flowers> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Flowers>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Flowers> CreateFlowers(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<test::Flower>>> flowers = 0) {
  FlowersBuilder builder_(_fbb);
  builder_.add_flowers(flowers);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Flowers> CreateFlowersDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<test::Flower>> *flowers = nullptr) {
  auto flowers__ = flowers ? _fbb.CreateVector<::flatbuffers::Offset<test::Flower>>(*flowers) : 0;
  return test::CreateFlowers(
      _fbb,
      flowers__);
}

inline const test::Flowers *GetFlowers(const void *buf) {
  return ::flatbuffers::GetRoot<test::Flowers>(buf);
}

inline const test::Flowers *GetSizePrefixedFlowers(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<test::Flowers>(buf);
}

inline bool VerifyFlowersBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<test::Flowers>(nullptr);
}

inline bool VerifySizePrefixedFlowersBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<test::Flowers>(nullptr);
}

inline void FinishFlowersBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<test::Flowers> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFlowersBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<test::Flowers> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace test

#endif  // FLATBUFFERS_GENERATED_IRIS_TEST_H_
