// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: articles.proto3

#include "articles.proto3.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace test_art {
PROTOBUF_CONSTEXPR CAnswer::CAnswer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.answer_start_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CAnswerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CAnswerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CAnswerDefaultTypeInternal() {}
  union {
    CAnswer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CAnswerDefaultTypeInternal _CAnswer_default_instance_;
PROTOBUF_CONSTEXPR QASData::QASData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.answers_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.question_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QASDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QASDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QASDataDefaultTypeInternal() {}
  union {
    QASData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QASDataDefaultTypeInternal _QASData_default_instance_;
PROTOBUF_CONSTEXPR Paragraph::Paragraph(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.qasdata_)*/{}
  , /*decltype(_impl_.context_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParagraphDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParagraphDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParagraphDefaultTypeInternal() {}
  union {
    Paragraph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParagraphDefaultTypeInternal _Paragraph_default_instance_;
PROTOBUF_CONSTEXPR Article::Article(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.paragraphs_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ArticleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArticleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArticleDefaultTypeInternal() {}
  union {
    Article _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArticleDefaultTypeInternal _Article_default_instance_;
PROTOBUF_CONSTEXPR Articles::Articles(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.article_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ArticlesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArticlesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArticlesDefaultTypeInternal() {}
  union {
    Articles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArticlesDefaultTypeInternal _Articles_default_instance_;
}  // namespace test_art
static ::_pb::Metadata file_level_metadata_articles_2eproto3[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_articles_2eproto3 = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_articles_2eproto3 = nullptr;

const uint32_t TableStruct_articles_2eproto3::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_art::CAnswer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_art::CAnswer, _impl_.answer_start_),
  PROTOBUF_FIELD_OFFSET(::test_art::CAnswer, _impl_.text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_art::QASData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_art::QASData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::test_art::QASData, _impl_.question_),
  PROTOBUF_FIELD_OFFSET(::test_art::QASData, _impl_.answers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_art::Paragraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_art::Paragraph, _impl_.context_),
  PROTOBUF_FIELD_OFFSET(::test_art::Paragraph, _impl_.qasdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_art::Article, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_art::Article, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::test_art::Article, _impl_.paragraphs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_art::Articles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_art::Articles, _impl_.article_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::test_art::CAnswer)},
  { 8, -1, -1, sizeof(::test_art::QASData)},
  { 17, -1, -1, sizeof(::test_art::Paragraph)},
  { 25, -1, -1, sizeof(::test_art::Article)},
  { 33, -1, -1, sizeof(::test_art::Articles)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::test_art::_CAnswer_default_instance_._instance,
  &::test_art::_QASData_default_instance_._instance,
  &::test_art::_Paragraph_default_instance_._instance,
  &::test_art::_Article_default_instance_._instance,
  &::test_art::_Articles_default_instance_._instance,
};

const char descriptor_table_protodef_articles_2eproto3[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017articles.proto3\022\010test_art\"-\n\007CAnswer\022\024"
  "\n\014answer_start\030\001 \001(\003\022\014\n\004text\030\002 \001(\t\"K\n\007QA"
  "SData\022\n\n\002id\030\001 \001(\t\022\020\n\010question\030\002 \001(\t\022\"\n\007a"
  "nswers\030\003 \003(\0132\021.test_art.CAnswer\"@\n\tParag"
  "raph\022\017\n\007context\030\001 \001(\t\022\"\n\007qasData\030\002 \003(\0132\021"
  ".test_art.QASData\"A\n\007Article\022\r\n\005title\030\001 "
  "\001(\t\022\'\n\nparagraphs\030\002 \003(\0132\023.test_art.Parag"
  "raph\".\n\010Articles\022\"\n\007article\030\001 \003(\0132\021.test"
  "_art.Articleb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_articles_2eproto3_once;
const ::_pbi::DescriptorTable descriptor_table_articles_2eproto3 = {
    false, false, 340, descriptor_table_protodef_articles_2eproto3,
    "articles.proto3",
    &descriptor_table_articles_2eproto3_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_articles_2eproto3::offsets,
    file_level_metadata_articles_2eproto3, file_level_enum_descriptors_articles_2eproto3,
    file_level_service_descriptors_articles_2eproto3,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_articles_2eproto3_getter() {
  return &descriptor_table_articles_2eproto3;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_articles_2eproto3(&descriptor_table_articles_2eproto3);
namespace test_art {

// ===================================================================

class CAnswer::_Internal {
 public:
};

CAnswer::CAnswer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:test_art.CAnswer)
}
CAnswer::CAnswer(const CAnswer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CAnswer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.answer_start_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.answer_start_ = from._impl_.answer_start_;
  // @@protoc_insertion_point(copy_constructor:test_art.CAnswer)
}

inline void CAnswer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.answer_start_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CAnswer::~CAnswer() {
  // @@protoc_insertion_point(destructor:test_art.CAnswer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CAnswer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void CAnswer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CAnswer::Clear() {
// @@protoc_insertion_point(message_clear_start:test_art.CAnswer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _impl_.answer_start_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAnswer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 answer_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.answer_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "test_art.CAnswer.text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CAnswer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_art.CAnswer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 answer_start = 1;
  if (this->_internal_answer_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_answer_start(), target);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test_art.CAnswer.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_art.CAnswer)
  return target;
}

size_t CAnswer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_art.CAnswer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // int64 answer_start = 1;
  if (this->_internal_answer_start() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_answer_start());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CAnswer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CAnswer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CAnswer::GetClassData() const { return &_class_data_; }


void CAnswer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CAnswer*>(&to_msg);
  auto& from = static_cast<const CAnswer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:test_art.CAnswer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_answer_start() != 0) {
    _this->_internal_set_answer_start(from._internal_answer_start());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CAnswer::CopyFrom(const CAnswer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_art.CAnswer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAnswer::IsInitialized() const {
  return true;
}

void CAnswer::InternalSwap(CAnswer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  swap(_impl_.answer_start_, other->_impl_.answer_start_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAnswer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_articles_2eproto3_getter, &descriptor_table_articles_2eproto3_once,
      file_level_metadata_articles_2eproto3[0]);
}

// ===================================================================

class QASData::_Internal {
 public:
};

QASData::QASData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:test_art.QASData)
}
QASData::QASData(const QASData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QASData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.answers_){from._impl_.answers_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.question_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.question_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.question_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_question().empty()) {
    _this->_impl_.question_.Set(from._internal_question(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:test_art.QASData)
}

inline void QASData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.answers_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.question_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.question_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.question_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QASData::~QASData() {
  // @@protoc_insertion_point(destructor:test_art.QASData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QASData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.answers_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.question_.Destroy();
}

void QASData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QASData::Clear() {
// @@protoc_insertion_point(message_clear_start:test_art.QASData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.answers_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.question_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QASData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "test_art.QASData.id"));
        } else
          goto handle_unusual;
        continue;
      // string question = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_question();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "test_art.QASData.question"));
        } else
          goto handle_unusual;
        continue;
      // repeated .test_art.CAnswer answers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_answers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QASData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_art.QASData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test_art.QASData.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string question = 2;
  if (!this->_internal_question().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_question().data(), static_cast<int>(this->_internal_question().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test_art.QASData.question");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_question(), target);
  }

  // repeated .test_art.CAnswer answers = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_answers_size()); i < n; i++) {
    const auto& repfield = this->_internal_answers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_art.QASData)
  return target;
}

size_t QASData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_art.QASData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .test_art.CAnswer answers = 3;
  total_size += 1UL * this->_internal_answers_size();
  for (const auto& msg : this->_impl_.answers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string question = 2;
  if (!this->_internal_question().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_question());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QASData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QASData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QASData::GetClassData() const { return &_class_data_; }


void QASData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QASData*>(&to_msg);
  auto& from = static_cast<const QASData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:test_art.QASData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.answers_.MergeFrom(from._impl_.answers_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_question().empty()) {
    _this->_internal_set_question(from._internal_question());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QASData::CopyFrom(const QASData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_art.QASData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QASData::IsInitialized() const {
  return true;
}

void QASData::InternalSwap(QASData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.answers_.InternalSwap(&other->_impl_.answers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.question_, lhs_arena,
      &other->_impl_.question_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata QASData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_articles_2eproto3_getter, &descriptor_table_articles_2eproto3_once,
      file_level_metadata_articles_2eproto3[1]);
}

// ===================================================================

class Paragraph::_Internal {
 public:
};

Paragraph::Paragraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:test_art.Paragraph)
}
Paragraph::Paragraph(const Paragraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Paragraph* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.qasdata_){from._impl_.qasdata_}
    , decltype(_impl_.context_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.context_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.context_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_context().empty()) {
    _this->_impl_.context_.Set(from._internal_context(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:test_art.Paragraph)
}

inline void Paragraph::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.qasdata_){arena}
    , decltype(_impl_.context_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.context_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.context_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Paragraph::~Paragraph() {
  // @@protoc_insertion_point(destructor:test_art.Paragraph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Paragraph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.qasdata_.~RepeatedPtrField();
  _impl_.context_.Destroy();
}

void Paragraph::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Paragraph::Clear() {
// @@protoc_insertion_point(message_clear_start:test_art.Paragraph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.qasdata_.Clear();
  _impl_.context_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Paragraph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_context();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "test_art.Paragraph.context"));
        } else
          goto handle_unusual;
        continue;
      // repeated .test_art.QASData qasData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_qasdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Paragraph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_art.Paragraph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string context = 1;
  if (!this->_internal_context().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_context().data(), static_cast<int>(this->_internal_context().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test_art.Paragraph.context");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_context(), target);
  }

  // repeated .test_art.QASData qasData = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_qasdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_qasdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_art.Paragraph)
  return target;
}

size_t Paragraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_art.Paragraph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .test_art.QASData qasData = 2;
  total_size += 1UL * this->_internal_qasdata_size();
  for (const auto& msg : this->_impl_.qasdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string context = 1;
  if (!this->_internal_context().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_context());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Paragraph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Paragraph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Paragraph::GetClassData() const { return &_class_data_; }


void Paragraph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Paragraph*>(&to_msg);
  auto& from = static_cast<const Paragraph&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:test_art.Paragraph)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.qasdata_.MergeFrom(from._impl_.qasdata_);
  if (!from._internal_context().empty()) {
    _this->_internal_set_context(from._internal_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Paragraph::CopyFrom(const Paragraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_art.Paragraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Paragraph::IsInitialized() const {
  return true;
}

void Paragraph::InternalSwap(Paragraph* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.qasdata_.InternalSwap(&other->_impl_.qasdata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.context_, lhs_arena,
      &other->_impl_.context_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Paragraph::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_articles_2eproto3_getter, &descriptor_table_articles_2eproto3_once,
      file_level_metadata_articles_2eproto3[2]);
}

// ===================================================================

class Article::_Internal {
 public:
};

Article::Article(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:test_art.Article)
}
Article::Article(const Article& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Article* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.paragraphs_){from._impl_.paragraphs_}
    , decltype(_impl_.title_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:test_art.Article)
}

inline void Article::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.paragraphs_){arena}
    , decltype(_impl_.title_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Article::~Article() {
  // @@protoc_insertion_point(destructor:test_art.Article)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Article::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.paragraphs_.~RepeatedPtrField();
  _impl_.title_.Destroy();
}

void Article::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Article::Clear() {
// @@protoc_insertion_point(message_clear_start:test_art.Article)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.paragraphs_.Clear();
  _impl_.title_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Article::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "test_art.Article.title"));
        } else
          goto handle_unusual;
        continue;
      // repeated .test_art.Paragraph paragraphs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paragraphs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Article::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_art.Article)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test_art.Article.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // repeated .test_art.Paragraph paragraphs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_paragraphs_size()); i < n; i++) {
    const auto& repfield = this->_internal_paragraphs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_art.Article)
  return target;
}

size_t Article::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_art.Article)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .test_art.Paragraph paragraphs = 2;
  total_size += 1UL * this->_internal_paragraphs_size();
  for (const auto& msg : this->_impl_.paragraphs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Article::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Article::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Article::GetClassData() const { return &_class_data_; }


void Article::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Article*>(&to_msg);
  auto& from = static_cast<const Article&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:test_art.Article)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.paragraphs_.MergeFrom(from._impl_.paragraphs_);
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Article::CopyFrom(const Article& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_art.Article)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Article::IsInitialized() const {
  return true;
}

void Article::InternalSwap(Article* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.paragraphs_.InternalSwap(&other->_impl_.paragraphs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Article::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_articles_2eproto3_getter, &descriptor_table_articles_2eproto3_once,
      file_level_metadata_articles_2eproto3[3]);
}

// ===================================================================

class Articles::_Internal {
 public:
};

Articles::Articles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:test_art.Articles)
}
Articles::Articles(const Articles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Articles* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.article_){from._impl_.article_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:test_art.Articles)
}

inline void Articles::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.article_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Articles::~Articles() {
  // @@protoc_insertion_point(destructor:test_art.Articles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Articles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.article_.~RepeatedPtrField();
}

void Articles::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Articles::Clear() {
// @@protoc_insertion_point(message_clear_start:test_art.Articles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.article_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Articles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .test_art.Article article = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_article(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Articles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_art.Articles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .test_art.Article article = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_article_size()); i < n; i++) {
    const auto& repfield = this->_internal_article(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_art.Articles)
  return target;
}

size_t Articles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_art.Articles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .test_art.Article article = 1;
  total_size += 1UL * this->_internal_article_size();
  for (const auto& msg : this->_impl_.article_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Articles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Articles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Articles::GetClassData() const { return &_class_data_; }


void Articles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Articles*>(&to_msg);
  auto& from = static_cast<const Articles&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:test_art.Articles)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.article_.MergeFrom(from._impl_.article_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Articles::CopyFrom(const Articles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_art.Articles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Articles::IsInitialized() const {
  return true;
}

void Articles::InternalSwap(Articles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.article_.InternalSwap(&other->_impl_.article_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Articles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_articles_2eproto3_getter, &descriptor_table_articles_2eproto3_once,
      file_level_metadata_articles_2eproto3[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace test_art
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::test_art::CAnswer*
Arena::CreateMaybeMessage< ::test_art::CAnswer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_art::CAnswer >(arena);
}
template<> PROTOBUF_NOINLINE ::test_art::QASData*
Arena::CreateMaybeMessage< ::test_art::QASData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_art::QASData >(arena);
}
template<> PROTOBUF_NOINLINE ::test_art::Paragraph*
Arena::CreateMaybeMessage< ::test_art::Paragraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_art::Paragraph >(arena);
}
template<> PROTOBUF_NOINLINE ::test_art::Article*
Arena::CreateMaybeMessage< ::test_art::Article >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_art::Article >(arena);
}
template<> PROTOBUF_NOINLINE ::test_art::Articles*
Arena::CreateMaybeMessage< ::test_art::Articles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_art::Articles >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
