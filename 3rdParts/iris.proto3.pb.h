// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iris.proto3

#ifndef GOOGLE_PROTOBUF_INCLUDED_iris_2eproto3
#define GOOGLE_PROTOBUF_INCLUDED_iris_2eproto3

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_iris_2eproto3
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_iris_2eproto3 {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_iris_2eproto3;
namespace test1 {
class Flower;
struct FlowerDefaultTypeInternal;
extern FlowerDefaultTypeInternal _Flower_default_instance_;
class Flowers;
struct FlowersDefaultTypeInternal;
extern FlowersDefaultTypeInternal _Flowers_default_instance_;
}  // namespace test1
PROTOBUF_NAMESPACE_OPEN
template<> ::test1::Flower* Arena::CreateMaybeMessage<::test1::Flower>(Arena*);
template<> ::test1::Flowers* Arena::CreateMaybeMessage<::test1::Flowers>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test1 {

// ===================================================================

class Flower final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test1.Flower) */ {
 public:
  inline Flower() : Flower(nullptr) {}
  ~Flower() override;
  explicit PROTOBUF_CONSTEXPR Flower(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Flower(const Flower& from);
  Flower(Flower&& from) noexcept
    : Flower() {
    *this = ::std::move(from);
  }

  inline Flower& operator=(const Flower& from) {
    CopyFrom(from);
    return *this;
  }
  inline Flower& operator=(Flower&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Flower& default_instance() {
    return *internal_default_instance();
  }
  static inline const Flower* internal_default_instance() {
    return reinterpret_cast<const Flower*>(
               &_Flower_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Flower& a, Flower& b) {
    a.Swap(&b);
  }
  inline void Swap(Flower* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Flower* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Flower* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Flower>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Flower& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Flower& from) {
    Flower::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Flower* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test1.Flower";
  }
  protected:
  explicit Flower(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeciesFieldNumber = 5,
    kSepalLengthFieldNumber = 1,
    kSepalWidthFieldNumber = 2,
    kPetalLengthFieldNumber = 3,
    kPetalWidthFieldNumber = 4,
  };
  // string species = 5;
  void clear_species();
  const std::string& species() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_species(ArgT0&& arg0, ArgT... args);
  std::string* mutable_species();
  PROTOBUF_NODISCARD std::string* release_species();
  void set_allocated_species(std::string* species);
  private:
  const std::string& _internal_species() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_species(const std::string& value);
  std::string* _internal_mutable_species();
  public:

  // float sepalLength = 1;
  void clear_sepallength();
  float sepallength() const;
  void set_sepallength(float value);
  private:
  float _internal_sepallength() const;
  void _internal_set_sepallength(float value);
  public:

  // float sepalWidth = 2;
  void clear_sepalwidth();
  float sepalwidth() const;
  void set_sepalwidth(float value);
  private:
  float _internal_sepalwidth() const;
  void _internal_set_sepalwidth(float value);
  public:

  // float petalLength = 3;
  void clear_petallength();
  float petallength() const;
  void set_petallength(float value);
  private:
  float _internal_petallength() const;
  void _internal_set_petallength(float value);
  public:

  // float petalWidth = 4;
  void clear_petalwidth();
  float petalwidth() const;
  void set_petalwidth(float value);
  private:
  float _internal_petalwidth() const;
  void _internal_set_petalwidth(float value);
  public:

  // @@protoc_insertion_point(class_scope:test1.Flower)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr species_;
    float sepallength_;
    float sepalwidth_;
    float petallength_;
    float petalwidth_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_iris_2eproto3;
};
// -------------------------------------------------------------------

class Flowers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test1.Flowers) */ {
 public:
  inline Flowers() : Flowers(nullptr) {}
  ~Flowers() override;
  explicit PROTOBUF_CONSTEXPR Flowers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Flowers(const Flowers& from);
  Flowers(Flowers&& from) noexcept
    : Flowers() {
    *this = ::std::move(from);
  }

  inline Flowers& operator=(const Flowers& from) {
    CopyFrom(from);
    return *this;
  }
  inline Flowers& operator=(Flowers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Flowers& default_instance() {
    return *internal_default_instance();
  }
  static inline const Flowers* internal_default_instance() {
    return reinterpret_cast<const Flowers*>(
               &_Flowers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Flowers& a, Flowers& b) {
    a.Swap(&b);
  }
  inline void Swap(Flowers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Flowers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Flowers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Flowers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Flowers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Flowers& from) {
    Flowers::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Flowers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test1.Flowers";
  }
  protected:
  explicit Flowers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlowersFieldNumber = 1,
  };
  // repeated .test1.Flower flowers = 1;
  int flowers_size() const;
  private:
  int _internal_flowers_size() const;
  public:
  void clear_flowers();
  ::test1::Flower* mutable_flowers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test1::Flower >*
      mutable_flowers();
  private:
  const ::test1::Flower& _internal_flowers(int index) const;
  ::test1::Flower* _internal_add_flowers();
  public:
  const ::test1::Flower& flowers(int index) const;
  ::test1::Flower* add_flowers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test1::Flower >&
      flowers() const;

  // @@protoc_insertion_point(class_scope:test1.Flowers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test1::Flower > flowers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_iris_2eproto3;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Flower

// float sepalLength = 1;
inline void Flower::clear_sepallength() {
  _impl_.sepallength_ = 0;
}
inline float Flower::_internal_sepallength() const {
  return _impl_.sepallength_;
}
inline float Flower::sepallength() const {
  // @@protoc_insertion_point(field_get:test1.Flower.sepalLength)
  return _internal_sepallength();
}
inline void Flower::_internal_set_sepallength(float value) {
  
  _impl_.sepallength_ = value;
}
inline void Flower::set_sepallength(float value) {
  _internal_set_sepallength(value);
  // @@protoc_insertion_point(field_set:test1.Flower.sepalLength)
}

// float sepalWidth = 2;
inline void Flower::clear_sepalwidth() {
  _impl_.sepalwidth_ = 0;
}
inline float Flower::_internal_sepalwidth() const {
  return _impl_.sepalwidth_;
}
inline float Flower::sepalwidth() const {
  // @@protoc_insertion_point(field_get:test1.Flower.sepalWidth)
  return _internal_sepalwidth();
}
inline void Flower::_internal_set_sepalwidth(float value) {
  
  _impl_.sepalwidth_ = value;
}
inline void Flower::set_sepalwidth(float value) {
  _internal_set_sepalwidth(value);
  // @@protoc_insertion_point(field_set:test1.Flower.sepalWidth)
}

// float petalLength = 3;
inline void Flower::clear_petallength() {
  _impl_.petallength_ = 0;
}
inline float Flower::_internal_petallength() const {
  return _impl_.petallength_;
}
inline float Flower::petallength() const {
  // @@protoc_insertion_point(field_get:test1.Flower.petalLength)
  return _internal_petallength();
}
inline void Flower::_internal_set_petallength(float value) {
  
  _impl_.petallength_ = value;
}
inline void Flower::set_petallength(float value) {
  _internal_set_petallength(value);
  // @@protoc_insertion_point(field_set:test1.Flower.petalLength)
}

// float petalWidth = 4;
inline void Flower::clear_petalwidth() {
  _impl_.petalwidth_ = 0;
}
inline float Flower::_internal_petalwidth() const {
  return _impl_.petalwidth_;
}
inline float Flower::petalwidth() const {
  // @@protoc_insertion_point(field_get:test1.Flower.petalWidth)
  return _internal_petalwidth();
}
inline void Flower::_internal_set_petalwidth(float value) {
  
  _impl_.petalwidth_ = value;
}
inline void Flower::set_petalwidth(float value) {
  _internal_set_petalwidth(value);
  // @@protoc_insertion_point(field_set:test1.Flower.petalWidth)
}

// string species = 5;
inline void Flower::clear_species() {
  _impl_.species_.ClearToEmpty();
}
inline const std::string& Flower::species() const {
  // @@protoc_insertion_point(field_get:test1.Flower.species)
  return _internal_species();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Flower::set_species(ArgT0&& arg0, ArgT... args) {
 
 _impl_.species_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test1.Flower.species)
}
inline std::string* Flower::mutable_species() {
  std::string* _s = _internal_mutable_species();
  // @@protoc_insertion_point(field_mutable:test1.Flower.species)
  return _s;
}
inline const std::string& Flower::_internal_species() const {
  return _impl_.species_.Get();
}
inline void Flower::_internal_set_species(const std::string& value) {
  
  _impl_.species_.Set(value, GetArenaForAllocation());
}
inline std::string* Flower::_internal_mutable_species() {
  
  return _impl_.species_.Mutable(GetArenaForAllocation());
}
inline std::string* Flower::release_species() {
  // @@protoc_insertion_point(field_release:test1.Flower.species)
  return _impl_.species_.Release();
}
inline void Flower::set_allocated_species(std::string* species) {
  if (species != nullptr) {
    
  } else {
    
  }
  _impl_.species_.SetAllocated(species, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.species_.IsDefault()) {
    _impl_.species_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test1.Flower.species)
}

// -------------------------------------------------------------------

// Flowers

// repeated .test1.Flower flowers = 1;
inline int Flowers::_internal_flowers_size() const {
  return _impl_.flowers_.size();
}
inline int Flowers::flowers_size() const {
  return _internal_flowers_size();
}
inline void Flowers::clear_flowers() {
  _impl_.flowers_.Clear();
}
inline ::test1::Flower* Flowers::mutable_flowers(int index) {
  // @@protoc_insertion_point(field_mutable:test1.Flowers.flowers)
  return _impl_.flowers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test1::Flower >*
Flowers::mutable_flowers() {
  // @@protoc_insertion_point(field_mutable_list:test1.Flowers.flowers)
  return &_impl_.flowers_;
}
inline const ::test1::Flower& Flowers::_internal_flowers(int index) const {
  return _impl_.flowers_.Get(index);
}
inline const ::test1::Flower& Flowers::flowers(int index) const {
  // @@protoc_insertion_point(field_get:test1.Flowers.flowers)
  return _internal_flowers(index);
}
inline ::test1::Flower* Flowers::_internal_add_flowers() {
  return _impl_.flowers_.Add();
}
inline ::test1::Flower* Flowers::add_flowers() {
  ::test1::Flower* _add = _internal_add_flowers();
  // @@protoc_insertion_point(field_add:test1.Flowers.flowers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test1::Flower >&
Flowers::flowers() const {
  // @@protoc_insertion_point(field_list:test1.Flowers.flowers)
  return _impl_.flowers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test1

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_iris_2eproto3
